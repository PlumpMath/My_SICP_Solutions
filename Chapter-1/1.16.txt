Exercise 1.16. Design a procedure that evolves an iterative exponentiation process that uses successive
squaring and uses a logarithmic number of steps, as does fast-expt. (Hint: Using the observation that
(bn/2)2 = (b2)n/2, keep, along with the exponent n and the base b, an additional state variable a, and define
the state transformation in such a way that the product a bn is unchanged from state to state. At the
beginning of the process a is taken to be 1, and the answer is given by the value of a at the end of the
process. In general, the technique of defining an invariant quantity that remains unchanged from state to
state is a powerful way to think about the design of iterative algorithms.)

= >  Solution: 
Solution 1:

#lang scheme
(define (square x) 
           (* x x))

(define (fast-expt x b n p)
   (cond ((= x n) p)
         ((= x (+ n 1)) (* p b))
         ((<= (* 2 x) n) (fast-expt (* 2 x) b  n (square p)))
         (else (fast-expt (+ x 1) b n (* p b)))))


Although it is done in iterative process, the number of multiplication is not exactly the same as fast-expt done in recursive manner.

Oops !!! this can be simply written as the below one 
Solution 2:

#lang scheme
(define (square x) (* x x)) 


(define (even? n)
     (if (= (remainder n 2) 0) true false))    

(define (fast-expt-iter b n result)
   (cond ((= n 1) result)      
         ((even? n) (fast-expt-iter b  (/ n 2) (square result)))
         (else (fast-expt-iter b (- n 1) (* b result)))))


